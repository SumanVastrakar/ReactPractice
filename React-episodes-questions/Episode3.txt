⭕️ What is `NPM`?
✅ NPM stands for Node Package Manager. It is a package manager for JavaScript programming language,
primarily used to manage and install packages or libraries for Node.js.
Node.js is a runtime that allows you to execute JavaScript code server-side,
and NPM is the default package manager that comes with it.

⭕️ What is `Parcel/Webpack`? Why do we need it?
✅ Parcel and Webpack are both popular JavaScript bundlers,
which are tools used to bundle and optimize web assets such as JavaScript,
CSS, and images for a web application

features of parcel =
🌼 HMR (Hot Module Replacement) = HMR stands for Hot Module Replacement, and it is a feature provided
by bundlers like Parcel and Webpack. HMR allows developers to update and replace modules
in a running application without requiring a full page reload. This feature significantly
speeds up the development process by allowing developers to see the changes they make
in real-time without losing the current application state.
🌼 Caching = Parcel caches everything it builds to disk. 
If you restart the dev server, Parcel will only rebuild files that 
have changed since the last time it ran
🌼 HTTPS = Sometimes, you may need to use HTTPS during development.
For example, you may need to use a certain hostname for authentication cookies,
or debug mixed content issues. Parcel’s dev server supports HTTPS out of the box.
You can either use an automatically generated certificate, or provide your own.(npx parcel index.html --https)
File Watcher Algorithm 
🌼Bundling 
🌼Cleaning our code (Treeshaking)
🌼Dev and production build
🌼super fat build Algorithm
🌼Image optimization
🌼compatible with the older version of browser(browserlist)
🌼Alot port number atomatically whichever is available 
🌼zero-config = A "zero-config" or "zero-configuration" bundler refers to a tool that requires little to no manual configuration from the developer to set up and use.

⭕️ What is `.parcel-cache`
✅ The .parcel-cache directory is a directory created by the Parcel bundler 
to store cached data related to the build process. When you run the Parcel bundler,
it performs various tasks such as dependency resolution, compilation, 
and bundling of your project's assets. To speed up subsequent builds and
avoid unnecessary work, Parcel caches certain data in the .parcel-cache directory.

⭕️ What is `npx`?
✅ npx is used to execute binaries from npm packages. It is particularly useful for running commands
from packages that you don't have installed globally.(execute without downloading)

⭕️ What is difference between `dependencies` vs `devDependencies`?
✅ Dependencies (dependencies):
Dependencies listed under the dependencies section are packages that are required for the application to run
in a production environment. These are the dependencies that your application needs in order to function
properly when deployed. Examples include libraries, frameworks, and tools used in the production code.

Development Dependencies (devDependencies):
Dependencies listed under the devDependencies section are packages that are only needed for development 
and testing purposes. These dependencies are not required for the actual production runtime of the
application but are necessary during development, testing, and build processes.

⭕️ What is Tree Shaking?
✅ Tree shaking is a technique used in JavaScript module bundlers, such as Webpack and Rollup, to 
eliminate dead (unused or unreachable) code from the final bundled code. The goal of tree shaking is
to optimize the size of the generated bundle by removing parts of the code that are not actually used 
in the application.

⭕️ What is the difference between `package.json` and `package-lock.json`?
✅ package.json:
package.json is a metadata file for a Node.js project that contains information about the project,
its configuration, and its dependencies. It includes details such as the project's name, version,
entry points, scripts, and dependencies.

package-lock.json:
package-lock.json is an automatically generated file that is created and updated by npm.
It serves as a record of the exact versions of every installed package and its dependencies,
including their transitive dependencies, at the time of the last npm install command.

⭕️ Why should I not modify `package-lock.json`?
✅ The package-lock.json file is automatically generated by npm during the installation of dependencies,
and it serves as a record of the exact versions of every installed package and its dependencies,
including their transitive dependencies. This file is crucial for ensuring deterministic and 
reproducible builds across different environments and for preventing dependency version mismatches. 

⭕️ What is `node_modules` ? Is it a good idea to push that on git?
✅ node_modules is a directory that contains the dependencies (libraries or modules) installed for a Node.js
project. When you use npm or another package manager to install dependencies specified in your package.json
file, these packages are downloaded and stored in the node_modules directory.
let say i installed parcel, but parcel is also using something internally those are installed and 
stored in node_modules

⭕️ What is the `dist` folder?
✅ In the context of build tools like Parcel, the dist folder typically stands for "distribution" and is
commonly used to store the output or distribution files generated during the build process.
The dist directory typically contains the optimized and bundled files that are meant for deployment
or distribution to production.

⭕️ What is `browserlists`?
✅ By maintaining a Browserslist configuration, developers can ensure that their web projects are compatible
with the browsers used by their target audience, while avoiding unnecessary code bloat for outdated or 
less commonly used browsers.

🌼 {
  "browserslist": [
    "last 2 versions",
    "> 1%",
    "IE 11"
  ],
  // ...
}

⭕️ About: ^ - caret and ~ - tilda
✅Caret (^):
The caret is used to specify a version range that includes the specified version and allows updates to the
most recent minor or patch release. It sets a boundary for the leftmost non-zero digit in the version number.

Tilde (~):
The tilde is used to specify a version range that includes the specified version and allows updates to 
the most recent patch release. It sets a boundary for the rightmost non-zero digit in the version number.
(Generally use for major version upgrades)

⭕️ Different type of script in html 
✅JavaScript (default):
When the type attribute is not specified or set to "text/javascript", the browser assumes it's JavaScript.
This is the default behavior.
🌼 <script>
// JavaScript code here
</script>
OR 
<script type="text/javascript">
// JavaScript code here
</script>

JavaScript ES6: 
For scripts written using ECMAScript 2015 (ES6) or later versions, you can use the type attribute with
the value "module".
🌼<script type="module">
// ES6 JavaScript code here
</script>

JavaScript with an External File:
When including an external JavaScript file, the type attribute is not required.
The browser assumes JavaScript by default.
🌼<script src="script.js"></script>

JSON:
The type attribute can be set to "application/json" when including JSON data.
🌼 <script type="application/json">
{
"key": "value"
}
</script>