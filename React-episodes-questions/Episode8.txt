⭕️ What is a Microservice?
✅ A microservice is a software architectural style that structures an application as a collection of
small, independent, and loosely coupled services. Each microservice is designed to perform a 
specific business function and operates as a self-contained unit. Microservices communicate with
each other over well-defined APIs (Application Programming Interfaces) and can be developed, 
deployed, and scaled independently.


⭕️ What is Monolith architecture?
✅ Monolithic architecture is a traditional software architectural style where all the components and
modules of an application are tightly integrated and interconnected into a single codebase, 
typically deployed as a single executable or deployable unit. In a monolithic application, all
functionality, including the user interface, business logic, and data access, is combined into a 
single, cohesive unit.




⭕️ What is the difference between Monolith and Microservice?
✅ Monolithic architecture and microservices architecture are two different approaches to structuring
software applications. 

Here are the key differences between monoliths and microservices:

Architecture:
Monolith: In a monolithic architecture, the entire application is developed and deployed as a single,
tightly integrated unit. All components and modules are part of the same codebase.
Microservices: In a microservices architecture, the application is divided into small, independent 
services, each representing a specific business capability. Each service is a standalone unit with 
its own codebase, data storage, and communication mechanisms.

Integration:
Monolith: Components in a monolith are tightly integrated, often sharing the same code, resources,
and databases. Changes to one part of the application may require retesting and redeploying the
entire monolith.
Microservices: Microservices are loosely coupled, communicating with each other through well-defined
APIs. Each service operates independently, and changes to one service do not directly impact others.

Scalability:
Monolith: Scaling a monolithic application involves scaling the entire application, even if only
specific parts require additional resources. This can lead to inefficiencies.
Microservices: Microservices can be scaled independently, allowing for more efficient resource
utilization. Services experiencing high demand can be scaled individually.

Technology Stack:
Monolith: Components within a monolith typically use the same technology stack, programming language,
and frameworks. Technological homogeneity is common.
Microservices: Each microservice can use its own technology stack, allowing for technological 
diversity. This flexibility enables teams to choose the best tools for each service.

Deployment:
Monolith: The entire monolithic application is deployed as a single unit. Updates or changes to any 
part of the application require deploying the entire monolith.
Microservices: Each microservice can be deployed independently. Updates to one service do not 
require redeploying the entire application, facilitating faster and more frequent deployments.

Maintainability:
Monolith: Large monolithic codebases can become complex and challenging to maintain. Changes may have
unintended consequences due to tight integration.
Microservices: Microservices are designed for maintainability. Each service is a separate unit, making it easier to develop, test, and deploy changes without affecting the entire application.

Team Size:
Monolith: Smaller teams may face coordination challenges when working on different parts of a 
monolithic application. Changes may require collaboration across the entire team.
Microservices: Microservices allow for smaller, more autonomous teams to work independently on 
specific services, improving agility and reducing coordination overhead.

Failure Isolation:
Monolith: If a component within a monolith fails, it may impact the entire application,
resulting in a potential system-wide failure.
Microservices: Failures in one microservice do not necessarily impact others. Microservices are 
designed to be resilient, with failures isolated to individual services.


⭕️ Why do we need a useEffect Hook?
✅ The useEffect Hook in React is used to perform side effects in functional components. 
Side effects can include things like data fetching, subscriptions, manual DOM manipulations, 
and more. useEffect is crucial because it allows you to manage these side effects in a way that
aligns with React's component lifecycle.

Here are several reasons why the useEffect Hook is essential:

Lifecycle Management:
useEffect allows you to manage side effects during different phases of a component's lifecycle. 
It can mimic the behavior of lifecycle methods like componentDidMount, componentDidUpdate, and 
componentWillUnmount in class components.

Avoiding Side-Effect in Render:
Placing side effects directly within the component body (outside of useEffect) could lead to 
undesired behaviors, like causing infinite re-renders. useEffect ensures that side effects are 
executed after the initial render and after each subsequent update.

Data Fetching:
useEffect is commonly used for asynchronous operations such as data fetching. You can fetch data and
update the component's state in the effect function, ensuring that it runs after the component has 
rendered.

Subscription and Event Handling:
For managing subscriptions or event listeners, useEffect provides a convenient way to set them up 
and clean them up when the component is unmounted or when dependencies change.

Conditional Effects:
You can conditionally run effects based on specific conditions or dependencies, making it flexible 
and adaptable to different scenarios.

Dependency Tracking:
The second argument of useEffect is an array of dependencies. If specified, the effect runs only when these
dependencies change. This helps prevent unnecessary re-execution of the effect.

⭕️ What is Shimmer UI?
✅ Shimmer UI is a visual design technique used in user interfaces to indicate that content is loading or processing.
It is a subtle animation that creates a shimmering effect, typically resembling a subtle wave or gentle movement, over an area 
where content is expected to appear. The shimmer effect is often used to give users a visual cue that something is happening in 
the background, especially when there is a delay in loading content.

⭕️ What is the difference between JS expression and JS statement
✅ JavaScript Expression:
An expression in JavaScript is a piece of code that produces a value. It can be a single value, a combination of values, or a
call to a function that returns a value. Expressions can appear anywhere in JavaScript code where a value is expected.

JavaScript Statement:
A statement in JavaScript is a larger unit of code that performs an action. Statements are executed one after another, and they often
don't produce a value by themselves. Instead, they carry out operations, control flow, or define structures.


⭕️ What is async and await?
✅ async Function:
The async keyword is used to define a function as asynchronous. An asynchronous function returns a promise implicitly, and it allows
the use of the await keyword inside the function. The async keyword can be placed before the function declaration or before an arrow 
function.

await Keyword:
The await keyword is used inside an async function to wait for a promise to resolve before continuing with the execution of the code.
It can only be used inside an async function.

⭕️ What is the use of `const json = await data.json() while making an api call?;` 
✅ In JavaScript, when making an API call using the fetch function, the response is returned as a Promise. The await keyword is used
to wait for this promise to resolve, and the response object is obtained. The .json() method is then called on the response object
to asynchronously parse the response body as JSON.

⭕️ 
✅

⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅
⭕️ 
✅


